```python
# ðŸŒ™ Moon Dev's Volumetric EMA Surge Backtest ðŸŒ™
from backtesting import Backtest, Strategy
from backtesting.lib import crossover
import pandas as pd
import talib
import numpy as np

# ðŸš€ Data Preparation Rocket Launch ðŸš€
data_path = "/Users/md/Dropbox/dev/github/moon-dev-ai-agents-for-trading/src/data/rbi/BTC-USD-15m.csv"
data = pd.read_csv(data_path)

# ðŸŒŒ Cosmic Data Cleaning ðŸŒŒ
data.columns = data.columns.str.strip().str.lower()
data = data.drop(columns=[col for col in data.columns if 'unnamed' in col])
data.rename(columns={
    'open': 'Open',
    'high': 'High',
    'low': 'Low',
    'close': 'Close',
    'volume': 'Volume'
}, inplace=True)
data['datetime'] = pd.to_datetime(data['datetime'])
data.set_index('datetime', inplace=True)

class VolumetricEMASurge(Strategy):
    risk_percent = 0.01  # 1% risk per trade ðŸŒ•
    
    def init(self):
        # âœ¨ Indicator Constellation Setup âœ¨
        self.ema200 = self.I(talib.EMA, self.data.Close, 200, name='EMA200')
        self.volume_avg20 = self.I(talib.SMA, self.data.Volume, 20, name='Vol20')
        self.rsi14 = self.I(talib.RSI, self.data.Close, 14, name='RSI14')
        
        # ðŸŒ  Moon Dev Debug Initialization ðŸŒ 
        print("ðŸŒ™ Lunar Strategy Activated - 200 EMA | 2x Volume Surge | RSI14 Guard")

    def next(self):
        # ðŸŒ” Orbital Position Tracking ðŸŒ”
        current_close = self.data.Close[-1]
        current_volume = self.data.Volume[-1]
        
        # ðŸŒ“ Cosmic Debug Prints (Every 100 Bars) ðŸŒ“
        if len(self.data) % 100 == 0:
            print(f"\nðŸŒ• Moon Phase Update ðŸŒ•\n"
                  f"| Close: {current_close:.2f}\n"
                  f"| EMA200: {self.ema200[-1]:.2f}\n"
                  f"| Volume: {current_volume:.2f} vs {self.volume_avg20[-1]:.2f}\n"
                  f"| RSI14: {self.rsi14[-1]:.2f}\n"
                  "âœ¨"*30)

        # ðŸš€ Launch Entry Sequence ðŸš€
        if not self.position:
            if (not np.isnan(self.ema200[-1]) and 
                current_close > self.ema200[-1] and 
                current_volume > 2 * self.volume_avg20[-1]):
                
                # ðŸ’° Risk Management Engine ðŸ’°
                entry_price = current_close
                stop_loss = entry_price * 0.98  # 2% Stellar Protection
                risk_amount = self.broker.get_value() * self.risk_percent
                position_size = int(round(risk_amount / (entry_price - stop_loss)))
                
                if position_size > 0:
                    self.buy(size=position_size, sl=stop_loss)
                    print(f"\nðŸš€ðŸŒ™ BLASTOFF! Long {position_size} @ {entry_price:.2f}\n"
                          f"| Stop Loss: {stop_loss:.2f}\n"
                          f"| Portfolio Risk: {self.risk_percent*100}%\n"
                          "âœ¨"*30)

        # ðŸŒ‘ Exit Protocol Activation ðŸŒ‘
        else:
            exit_signal = False
            # RSI Reversal Detection
            if len(self.rsi14) > 1 and self.rsi14[-1] < 70 and self.rsi14[-2] >= 70:
                print(f"ðŸŒ‘ RSI Fading Star Signal @ {self.rsi14[-1]:.2f}")
                exit_signal = True
                
            # EMA Shield Breach
            if current_close < self.ema200[-1]:
                print(f"ðŸŒ‘ EMA200 Cosmic Barrier Broken @ {current_close:.2f}")
                exit_signal = True
                
            if exit_signal:
                self.position.close()
                print(f"\nðŸŒ‘ðŸŒ™ RETURN TO BASE!\n"
                      f"| Exit Price: {current_close:.2f}\n"
                      f"| Profit: {self.position.pl_pct:.2%}\n"
                      "âœ¨"*30)

# ðŸŒ• Backtest Launch Sequence ðŸŒ•
bt = Backtest(data, VolumetricEMASur